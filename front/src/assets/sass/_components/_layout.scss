//
// Layout Component - Default Settings
// -----------------------------------
// Change in _settings.scss

$layout-prefix               : "l"                             !default;
$layout-mod                  : "#{$layout-prefix}#{$mod}"      !default;
$layout-el                   : "#{$layout-prefix}#{el}"        !default;
$layout-wrapper-max-width    : 48em                            !default;
$layout-wrapper-min-ie-width : 44em                            !default; // NOTE: old ie only
$layout-spacing-increments   : 0 1 2                           !default;
$layout-spacing-sides        : top bottom left right           !default;

/*

### Layout Helpers

#### Clearfix

<div class="#{$placeholder-el}block #{$layout-mod}clearfix">
  .#{$layout-mod}clearfix
  (use overflow:hidden)
</div>

<div class="#{$placeholder-el}block #{$layout-mod}clearfix-overflow">
  .#{$layout-mod}clearfix-overflow
  (old style)
</div>

*/

.#{$layout-mod}clearfix {
  @include clearfix;
}

.#{$layout-mod}clearfix-overflow {
  @include pie-clearfix;
}

/*

#### Floats

<div class="#{$placeholder-el}block #{$layout-mod}float-left">
  .#{$layout-mod}float-left
</div>

<div class="#{$placeholder-el}block #{$layout-mod}float-right">
  .#{$layout-mod}float-right
</div>

*/

.#{$layout-mod}float-left {
  float: left;
}

.#{$layout-mod}float-right {
  float: right;
}

/*

#### Wrapper

$max-site-width is assigned to this

*/

.#{$layout-el}wrapper {
  @extend .l--clearfix;
  max-width: $layout-wrapper-max-width;
  margin-left: auto;
  margin-right: auto;
  padding: 0 $grid-padding / 2;
  @include breakpoint($gte-medium) {
    padding: 0 $grid-padding;
  }
  @include breakpoint($gte-large) {
    padding: 0 $grid-padding * 2;
  }
  @include no-mqueries {
    min-width: $layout-wrapper-min-ie-width; // ? Sets a min-width in ie so it doesn't get too squashed
  }
}

/*

#### Spacing

These classes use `!important` as you would not be applying these should always "win".
Only use them if it does not make sense to add this styling to another element/component.

*/
@each $i in  $layout-spacing-increments {
  @each $side in  $layout-spacing-sides {
/*
```
<div class="#{$placeholder-el}block #{$layout-mod}push--#{$side}-#{$i}">
  .#{$layout-mod}push--#{$side}-#{$i}
</div>

<div class="#{$placeholder-el}block #{$layout-mod}pad--#{$side}-#{$i}">
  .#{$layout-mod}pad--#{$side}-#{$i}
</div>
```
*/
  }
/*
```
<div class="#{$placeholder-el}block #{$layout-mod}push--v-#{$i}">
  .#{$layout-mod}push--v-#{$i}
</div>

<div class="#{$placeholder-el}block #{$layout-mod}pad--v-#{$i}">
  .#{$layout-mod}pad--v-#{$i}
</div>

<div class="#{$placeholder-el}block #{$layout-mod}push--h-#{$i}">
  .#{$layout-mod}push--h-#{$i}
</div>

<div class="#{$placeholder-el}block #{$layout-mod}pad--h-#{$i}">
  .#{$layout-mod}pad--h-#{$i}
</div>
```
*/
}

@each $i in  $layout-spacing-increments {
  @each $side in  $layout-spacing-sides {
    .#{$layout-mod}push-#{$side}-#{$i} {
      margin-#{$side}: rhythm($i) !important;
    }
    .#{$layout-mod}pad-#{$side}-#{$i} {
      padding-#{$side}: rhythm($i) !important;
    }
  }
  .#{$layout-mod}push-v-#{$i} {
    margin-top: rhythm($i) !important;
    margin-bottom: rhythm($i) !important;
  }
  .#{$layout-mod}pad-v-#{$i} {
    padding-top: rhythm($i) !important;
    padding-bottom: rhythm($i) !important;
  }
  .#{$layout-mod}push-h-#{$i} {
    margin-left: rhythm($i) !important;
    margin-right: rhythm($i) !important;
  }
  .#{$layout-mod}pad-h-#{$i} {
    padding-left: rhythm($i) !important;
    padding-right: rhythm($i) !important;
  }
  .#{$layout-mod}push-all-#{$i} {
    margin: rhythm($i) !important;
  }
  .#{$layout-mod}pad-all-#{$i} {
    padding: rhythm($i) !important;
  }
}

